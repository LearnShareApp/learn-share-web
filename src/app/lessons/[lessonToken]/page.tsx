"use client";

import { useEffect, useState, useCallback } from "react";
import { useRouter } from "next/navigation";
import {
  LiveKitRoom,
  useLocalParticipant,
  RoomAudioRenderer,
  useTracks,
  ParticipantTile,
} from "@livekit/components-react";
import { Track, Room, ConnectionState, RoomEvent } from "livekit-client";
import "@livekit/components-styles";
import styles from "./page.module.scss";
import { use } from "react";
import ChatPanel from "@/features/ChatPanel";
import {
  AlertTriangle,
  RefreshCw,
  ArrowLeft,
  Loader2,
  Mic,
  MicOff,
  Video,
  VideoOff,
  ScreenShare,
  ScreenShareOff,
  MessageSquare,
  XSquare,
  PhoneOff,
} from "lucide-react";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è params —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
type PageParams = {
  lessonToken: string;
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –æ—à–∏–±–æ–∫ –º–µ–¥–∏–∞
interface MediaError extends Error {
  name: string;
  message: string;
}

export default function LessonRoomPage({
  params,
}: {
  params: Promise<PageParams>;
}) {
  const router = useRouter();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º React.use() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è params, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Next.js
  const resolvedParams = use(params);
  const lessonToken = resolvedParams.lessonToken;

  const [token, setToken] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [errorDetails, setErrorDetails] = useState<string | null>(null);
  const [mediaDevicesAvailable, setMediaDevicesAvailable] =
    useState<boolean>(false);
  const [isConnected, setIsConnected] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false);

  // –î–æ–±–∞–≤–∏–º useEffect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const [isChatMounted, setIsChatMounted] = useState(false);

  useEffect(() => {
    if (isChatOpen) {
      setIsChatMounted(true);
    } else {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞
      const timer = setTimeout(() => {
        setIsChatMounted(false);
      }, 300); // –î–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ CSS

      return () => clearTimeout(timer);
    }
  }, [isChatOpen]);

  // –í—ã–Ω–µ—Å–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–¥–∏–∞-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  const checkMediaDevices = useCallback(async () => {
    try {
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ URL
      if (lessonToken) {
        setToken(lessonToken);
      } else {
        setError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–∫–∞");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      if (typeof window !== "undefined" && typeof navigator !== "undefined") {
        try {
          if ("mediaDevices" in navigator) {
            console.log("MediaDevices API –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è");

            // –Ø–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
            try {
              // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
              const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true,
              });

              console.log("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω—ã");

              // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã, —Ç–∞–∫ –∫–∞–∫ LiveKit –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏—Ö —Å–Ω–æ–≤–∞
              stream.getTracks().forEach((track) => track.stop());

              // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
              setMediaDevicesAvailable(true);
            } catch (mediaError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:", mediaError);

              const err = mediaError as MediaError;

              if (
                err.name === "NotAllowedError" ||
                err.name === "PermissionDeniedError"
              ) {
                setError("–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω");
                setErrorDetails(
                  "–í—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏/–∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ß—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n\n" +
                    "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üîí –∏–ª–∏ üîíÔ∏è (–∑–∞–º–æ–∫) –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞\n" +
                    "2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞'\n" +
                    "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É\n" +
                    "4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'"
                );
              } else if (err.name === "NotFoundError") {
                setError("–ö–∞–º–µ—Ä–∞ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                setErrorDetails(
                  "–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä—ã –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç."
                );
              } else {
                setError("–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
                setErrorDetails(
                  `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}. ${
                    err.message || ""
                  }\n\n` +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä."
                );
              }
              return;
            }
          } else {
            console.warn("MediaDevices API –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
            setError("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏");
            setErrorDetails(
              "–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É (MediaDevices). " +
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Chrome, Firefox –∏–ª–∏ Safari.\n\n" +
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:\n" +
                "1. –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (HTTPS)\n" +
                "2. –£ –≤–∞—Å –Ω–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ\n" +
                "3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞"
            );
            return;
          }
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ–¥–∏–∞-—É—Å—Ç—Ä–æ–π—Å—Ç–≤:", err);
          setError("Error checking media devices");
          setErrorDetails(
            "An error occurred while checking for camera and microphone. " +
              "Your browser may be blocking access to them or they are being used by another application."
          );
          return;
        }
      } else {
        // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ true
        setMediaDevicesAvailable(true);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–∫–∞:", err);
      setError("Failed to initialize the lesson. Please refresh the page.");
      setErrorDetails(err instanceof Error ? err.message : String(err));
    }
  }, [lessonToken]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const handleRetry = useCallback(() => {
    setError(null);
    setErrorDetails(null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–Ω–æ–≤–æ
    checkMediaDevices();
  }, [checkMediaDevices]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  function PermissionInstructions() {
    return (
      <div className={styles.permissionInstructions}>
        <p>
          To make the video call work, you need to allow access to camera and
          microphone:
        </p>
        <ol style={{ textAlign: "left", marginBottom: "20px" }}>
          <li>
            Click on the <strong>üîí</strong> icon in the address bar
          </li>
          <li>
            In the popup menu, select <strong>Allow</strong> for camera and
            microphone
          </li>
          <li>
            Reload the page or click the &quot;Retry connection&quot; button
          </li>
        </ol>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º LiveKit
  useEffect(() => {
    checkMediaDevices();
  }, [checkMediaDevices]);

  const handleDisconnect = () => {
    console.log("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã");
    setIsConnected(false);
    router.push("/lessons");
  };

  if (error) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –∫–∞–º–µ—Ä—ã/–º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const isPermissionError =
      error.includes("camera") || error.includes("microphone");

    return (
      <div className={styles.errorContainer}>
        <div className={styles.errorMessage}>{error}</div>

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—à–∏–±–æ–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ */}
        {isPermissionError && <PermissionInstructions />}

        {errorDetails && (
          <div className={styles.errorDetails}>
            <details>
              <summary>
                <AlertTriangle
                  size={16}
                  style={{ marginRight: "8px", verticalAlign: "middle" }}
                />
                Technical details
              </summary>
              <p>{errorDetails}</p>
            </details>
          </div>
        )}
        <div className={styles.errorActions}>
          <button
            onClick={handleRetry}
            className={`${styles.backButton} ${styles.retryButton}`}
          >
            <RefreshCw size={16} style={{ marginRight: "8px" }} />
            Retry connection
          </button>
          <button
            onClick={() => router.push("/lessons")}
            className={styles.backButton}
          >
            <ArrowLeft size={16} style={{ marginRight: "8px" }} />
            Back to lessons
          </button>
        </div>
      </div>
    );
  }

  if (!token || !mediaDevicesAvailable) {
    return (
      <div className={styles.loadingContainer}>
        <Loader2 className={styles.loadingSpinner} size={48} />
        <div>Connecting to the lesson...</div>
      </div>
    );
  }

  const serverUrl = process.env.NEXT_PUBLIC_LIVEKIT_URL;

  console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit:", { serverUrl, tokenAvailable: !!token });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è serverUrl
  if (!serverUrl) {
    return (
      <div className={styles.errorContainer}>
        <div className={styles.errorMessage}>
          Configuration error: LiveKit server URL not found. Please contact the
          administrator.
        </div>
        <button
          onClick={() => router.push("/lessons")}
          className={styles.backButton}
        >
          <ArrowLeft size={16} style={{ marginRight: "8px" }} />
          Back to lessons
        </button>
      </div>
    );
  }

  return (
    <div className={styles.roomContainer}>
      <LiveKitRoom
        key={`livekit-room-${token}`} // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
        data-lk-theme="default"
        serverUrl={serverUrl}
        token={token}
        onDisconnected={() => {
          console.log("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã LiveKit");
          setIsConnected(false);
          // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–æ–≤
          if (!error) {
            handleDisconnect();
          }
        }}
        onConnected={() => {
          console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ LiveKit");
          // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          setError(null);
          setErrorDetails(null);
          setIsConnected(true);
        }}
        onError={(err) => {
          console.error("Error connecting to LiveKit:", err);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
          let errorMessage = "Error connecting to the lesson";
          let detailMessage = err.message || "Unknown error";

          if (err.message.includes("getUserMedia")) {
            errorMessage = "Failed to access camera or microphone";
            detailMessage =
              "Possible reasons: you didn't grant permission to use camera/microphone, devices are being used by another application, or they are not available in your system.\n\n" +
              "Try: refreshing the page, checking browser permissions, or connecting a camera/microphone.";
          } else if (err.message.includes("permission")) {
            errorMessage = "Missing required permissions";
            detailMessage =
              "Please allow access to camera and microphone in your browser settings.";
          } else if (
            err.message.includes("connect") ||
            err.message.includes("connection")
          ) {
            errorMessage = "Error connecting to server";
            detailMessage =
              "Check your internet connection or try again later.";
          } else if (
            err.message.includes("AudioContext") ||
            err.message.includes("audio")
          ) {
            errorMessage = "Audio problem";
            detailMessage =
              "Possible reasons: audio context is closed or already used by another application.\n\n" +
              "Try: refreshing the page or closing other applications using the microphone.";
          }

          setError(errorMessage);
          setErrorDetails(detailMessage);
          setIsConnected(false);
        }}
        // –û–ø—Ü–∏–∏ –º–µ–¥–∏–∞
        video={true}
        audio={true}
        connect={true}
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        options={{
          adaptiveStream: true, // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          dynacast: true, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        }}
      >
        <div
          className={`${styles.videoContainer} ${
            isChatOpen ? styles.withChat : ""
          }`}
        >
          <ImprovedVideoGrid />
        </div>

        <div
          className={`${styles.chatContainer} ${
            isChatOpen ? styles.visible : ""
          }`}
        >
          {isChatMounted && <ChatPanel setIsChatOpen={setIsChatOpen} />}
        </div>

        <div className={styles.controlsContainer}>
          <CustomControlBar
            isChatOpen={isChatOpen}
            setIsChatOpen={setIsChatOpen}
          />
        </div>
        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è RoomAudioRenderer, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å AudioContext */}
        {isConnected && <RoomAudioRenderer />}
      </LiveKitRoom>
    </div>
  );
}

function ImprovedVideoGrid() {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–∏ (–∫–∞–º–µ—Ä–∞ + –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞)
  const tracks = useTracks(
    [
      { source: Track.Source.Camera, withPlaceholder: true },
      { source: Track.Source.ScreenShare, withPlaceholder: false },
    ],
    {
      onlySubscribed: false,
    }
  );

  console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏:", tracks.length);

  // –°–æ–∑–¥–∞–µ–º —Å–≤–æ—é —Å–µ—Ç–∫—É –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GridLayout
  return (
    <div className={styles.videoGrid}>
      {tracks.map((track) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        const trackKey =
          track.participant.identity + (track.publication?.trackSid || "");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const isMobile =
          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            typeof navigator !== "undefined" ? navigator.userAgent : ""
          );

        return (
          <div
            key={trackKey}
            className={styles.participantTile}
            data-is-mobile={isMobile ? "true" : "false"}
          >
            <ParticipantTile
              trackRef={track}
              disableSpeakingIndicator={false}
              style={{ width: "100%", height: "100%", position: "relative" }}
            />
          </div>
        );
      })}
    </div>
  );
}

function CustomControlBar({
  isChatOpen,
  setIsChatOpen,
}: {
  isChatOpen: boolean;
  setIsChatOpen: React.Dispatch<React.SetStateAction<boolean>>;
}) {
  const { localParticipant } = useLocalParticipant();
  const [roomInstance, setRoomInstance] = useState<Room | null>(null);
  const router = useRouter();

  // State for control buttons
  const [isMicrophoneEnabled, setMicrophoneEnabled] = useState(true);
  const [isCameraEnabled, setCameraEnabled] = useState(true);
  const [isScreenShareEnabled, setScreenShareEnabled] = useState(false);
  const [connectionState, setConnectionState] =
    useState<ConnectionState | null>(null);

  useEffect(() => {
    // Get room instance from localParticipant
    if (localParticipant) {
      try {
        // @ts-expect-error - Ignore TS error as we know localParticipant has access to room
        const room = localParticipant._room;
        if (room) {
          setRoomInstance(room);

          // Monitor connection state
          const handleConnectionStateChange = (state: ConnectionState) => {
            console.log("Connection state changed:", state);
            setConnectionState(state);
          };

          room.on(
            RoomEvent.ConnectionStateChanged,
            handleConnectionStateChange
          );

          // Check current device state
          const mic = localParticipant.isMicrophoneEnabled;
          const camera = localParticipant.isCameraEnabled;

          setMicrophoneEnabled(mic);
          setCameraEnabled(camera);

          console.log("Initial device state:", { mic, camera });

          return () => {
            // Clean up listeners when unmounting
            room.off(
              RoomEvent.ConnectionStateChanged,
              handleConnectionStateChange
            );
          };
        }
      } catch (e) {
        console.error("Error getting room:", e);
      }
    }
  }, [localParticipant]);

  const toggleMicrophone = async () => {
    if (localParticipant) {
      try {
        await localParticipant.setMicrophoneEnabled(!isMicrophoneEnabled);
        setMicrophoneEnabled(!isMicrophoneEnabled);
        console.log(
          "Microphone:",
          !isMicrophoneEnabled ? "enabled" : "disabled"
        );
      } catch (e) {
        console.error("Error toggling microphone:", e);
        alert(
          "Failed to enable microphone. Check that your browser has access to the microphone."
        );
      }
    }
  };

  const toggleCamera = async () => {
    if (localParticipant) {
      try {
        await localParticipant.setCameraEnabled(!isCameraEnabled);
        setCameraEnabled(!isCameraEnabled);
        console.log("Camera:", !isCameraEnabled ? "enabled" : "disabled");
      } catch (e) {
        console.error("Error toggling camera:", e);
        alert(
          "Failed to enable camera. Check that your browser has access to the camera."
        );
      }
    }
  };

  const toggleScreenShare = async () => {
    if (localParticipant) {
      try {
        await localParticipant.setScreenShareEnabled(!isScreenShareEnabled);
        setScreenShareEnabled(!isScreenShareEnabled);
        console.log(
          "Screen sharing:",
          !isScreenShareEnabled ? "enabled" : "disabled"
        );
      } catch (e) {
        console.error("Error toggling screen sharing:", e);
        alert(
          "Failed to start screen sharing. Check your browser permissions."
        );
      }
    }
  };

  const toggleChat = () => {
    setIsChatOpen(!isChatOpen);
  };

  const handleLeaveRoom = () => {
    if (roomInstance) {
      roomInstance.disconnect();
    }
    router.push("/lessons");
  };

  // Connection status indicator
  let connectionLabel = "";
  let connectionColor = "";
  if (connectionState === ConnectionState.Connected) {
    connectionLabel = "Connected";
    connectionColor = "#4caf50"; // –∑–µ–ª–µ–Ω—ã–π
  } else if (connectionState === ConnectionState.Connecting) {
    connectionLabel = "Connecting...";
    connectionColor = "#ff9800"; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
  } else if (connectionState === ConnectionState.Disconnected) {
    connectionLabel = "Disconnected";
    connectionColor = "#f44336"; // –∫—Ä–∞—Å–Ω—ã–π
  } else if (connectionState === ConnectionState.Reconnecting) {
    connectionLabel = "Reconnecting...";
    connectionColor = "#ff9800"; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
  }

  return (
    <div className={styles.customControlBar}>
      <div className={styles.leftControls}>
        {connectionLabel && (
          <div
            className={styles.connectionStatus}
            style={
              {
                "--indicator-color": connectionColor,
              } as React.CSSProperties
            }
          >
            {connectionLabel}
          </div>
        )}
      </div>

      <div className={styles.centerControls}>
        <button
          className={`${styles.controlButton} ${
            isMicrophoneEnabled ? styles.active : styles.inactive
          }`}
          onClick={toggleMicrophone}
          title={
            isMicrophoneEnabled ? "Turn off microphone" : "Turn on microphone"
          }
        >
          <span className={styles.buttonIcon}>
            {isMicrophoneEnabled ? <Mic size={24} /> : <MicOff size={24} />}
          </span>
        </button>

        <button
          className={`${styles.controlButton} ${
            isCameraEnabled ? styles.active : styles.inactive
          }`}
          onClick={toggleCamera}
          title={isCameraEnabled ? "Turn off camera" : "Turn on camera"}
        >
          <span className={styles.buttonIcon}>
            {isCameraEnabled ? <Video size={24} /> : <VideoOff size={24} />}
          </span>
        </button>

        <button
          className={`${styles.controlButton} ${
            isScreenShareEnabled ? styles.active : styles.inactive
          }`}
          onClick={toggleScreenShare}
          title={
            isScreenShareEnabled
              ? "Stop screen sharing"
              : "Start screen sharing"
          }
        >
          <span className={styles.buttonIcon}>
            {isScreenShareEnabled ? (
              <ScreenShareOff size={24} />
            ) : (
              <ScreenShare size={24} />
            )}
          </span>
        </button>

        <button
          className={`${styles.controlButton} ${
            isChatOpen ? styles.active : styles.inactive
          }`}
          onClick={toggleChat}
          title={isChatOpen ? "–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç" : "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"}
        >
          <span className={styles.buttonIcon}>
            {isChatOpen ? <XSquare size={24} /> : <MessageSquare size={24} />}
          </span>
        </button>

        <button
          className={`${styles.controlButton} ${styles.leaveButton}`}
          onClick={handleLeaveRoom}
          title="Leave room"
        >
          <span className={styles.buttonIcon}>
            <PhoneOff size={24} />
          </span>
        </button>
      </div>

      <div className={styles.rightControls}>
        {/* –ü—É—Å—Ç–æ–π div –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
      </div>
    </div>
  );
}
